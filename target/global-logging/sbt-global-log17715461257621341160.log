[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\matti\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\matti\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 19.0.2)
[debug]       Load.loadUnit: plugins took 86.1354ms
[debug]       Load.loadUnit: defsScala took 0.219ms
[debug] [Loading] Scanning directory C:\Users\matti\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\matti\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.252 ms
[debug]           Load.resolveProject(global-plugins) took 40.1821ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\matti\.sbt\1.0\plugins, plugins: List(<none>))) took 72.8791ms
[debug] [Loading] Done in C:\Users\matti\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 92.3996ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2712ms
[debug]     Load.loadUnit(file:/C:/Users/matti/.sbt/1.0/plugins/, ...) took 189.8269ms
[debug]   Load.apply: load took 419.4528ms
[debug]   Load.apply: resolveProjects took 4.7861ms
[debug]   Load.apply: finalTransforms took 62.7172ms
[debug]   Load.apply: config.delegates took 12.8332ms
[debug]   Load.apply: Def.make(settings)... took 452.7839ms
[debug]   Load.apply: structureIndex took 92.3373ms
[debug]   Load.apply: mkStreams took 1.4977ms
[info] loading global plugins from C:\Users\matti\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2513.8361ms
[debug]           Load.loadUnit: plugins took 16.5286ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\matti\IdeaProjects\VersionControlSystem_Scala\project
[debug]             Load.loadUnit: mkEval took 6.8248ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\matti\IdeaProjects\VersionControlSystem_Scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4151 ms
[info] loading settings for project versioncontrolsystem_scala-build from idea1.sbt ...
[debug]               Load.resolveProject(versioncontrolsystem_scala-build) took 3.5726ms
[debug]             Load.loadTransitive: finalizeProject(Project(id versioncontrolsystem_scala-build, base: C:\Users\matti\IdeaProjects\VersionControlSystem_Scala\project, plugins: List(<none>))) took 5.5754ms
[debug] [Loading] Done in C:\Users\matti\IdeaProjects\VersionControlSystem_Scala\project, returning: (versioncontrolsystem_scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 143.5973ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.5339ms
[debug]         Load.loadUnit(file:/C:/Users/matti/IdeaProjects/VersionControlSystem_Scala/project/, ...) took 166.5093ms
[debug]       Load.apply: load took 167.972ms
[debug]       Load.apply: resolveProjects took 0.1286ms
[debug]       Load.apply: finalTransforms took 7.0065ms
[debug]       Load.apply: config.delegates took 0.364ms
[debug]       Load.apply: Def.make(settings)... took 66.1799ms
[debug]       Load.apply: structureIndex took 26.2851ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\matti\IdeaProjects\VersionControlSystem_Scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 540.8178ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\matti\IdeaProjects\VersionControlSystem_Scala
[debug]       Load.loadUnit: mkEval took 0.3337ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9997 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 27.6966ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\matti\IdeaProjects\VersionControlSystem_Scala, plugins: List(<none>))) took 31.0607ms
[debug] [Loading] Done in C:\Users\matti\IdeaProjects\VersionControlSystem_Scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 101.264ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.2737ms
[debug]   Load.loadUnit(file:/C:/Users/matti/IdeaProjects/VersionControlSystem_Scala/, ...) took 650.2051ms
[debug] Load.apply: load took 651.7919ms
[debug] Load.apply: resolveProjects took 0.1042ms
[debug] Load.apply: finalTransforms took 32.8299ms
[debug] Load.apply: config.delegates took 0.3353ms
[debug] Load.apply: Def.make(settings)... took 64.8513ms
[debug] Load.apply: structureIndex took 22.8175ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to VersionControlSystem_Scala (in build file:/C:/Users/matti/IdeaProjects/VersionControlSystem_Scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54551 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54551, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to VersionControlSystem_Scala (in build file:/C:/Users/matti/IdeaProjects/VersionControlSystem_Scala/)
[debug] > Exec(idea-shell, None, None)
